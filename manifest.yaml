id: c-lightning
version: 0.11.1
title: c-lightning
license: BSD-MIT
wrapper-repo: https://github.com/Start9Labs/c-lightning-wrapper
upstream-repo: https://github.com/ElementsProject/lightning
support-site: https://github.com/ElementsProject/lightning/issues
marketing-site: https://blockstream.com/lightning
release-notes: |-
  https://github.com/ElementsProject/lightning/releases/tag/v0.11.0
  https://github.com/ElementsProject/lightning/releases/tag/v0.11.1
build: ["make"]
description:
  short: "An implementation of the Lightning Network protocol by Blockstream."
  long: "c-lightning is a lightweight, highly customizable, and standards compliant implementation of the Lightning Network protocol. It is optimized for performance and extensibility."
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
  docker-images: image.tar
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts:
    main: /root/.lightning
    compat: /mnt/assets
  io-format: yaml
  shm-size-mb: 64
health-checks:
  rpc:
    name: RPC
    success-message: RPC server is alive and listening for commands
    type: docker
    image: main
    system: false
    entrypoint: check-rpc.sh
    args: []
    mounts: {}
    io-format: json
    inject: true
  synced:
    name: Synced
    success-message: Synced to chain and ready to perform on-chain operations
    type: docker
    image: main
    system: false
    entrypoint: check-synced.sh
    args: []
    mounts: {}
    io-format: yaml
    inject: true
config:
  get:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - config
      - get
      - /root/.lightning
      - /mnt/assets/config_spec.yaml
    mounts:
      compat: /mnt/assets
      main: /root/.lightning
    io-format: yaml
  set:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - config
      - set
      - c-lightning
      - /root/.lightning
      - /mnt/assets/config_rules.yaml
    mounts:
      compat: /mnt/assets
      main: /root/.lightning
    io-format: yaml
properties:
  type: docker
  image: compat
  system: true
  entrypoint: compat
  args:
    - properties
    - /root/.lightning
  mounts:
    main: /root/.lightning
  io-format: yaml
volumes:
  main:
    type: data
  compat:
    type: assets
alerts:
  install: |
    READ CAREFULLY! c-lightning and the Lightning Network are considered beta software. Please use with caution and do not
    risk more money than you are willing to lose. We encourage frequent backups. If for any reason, you need to restore
    c-lightning from a backup, your on-chain wallet will be restored, but the money locked up in your channels will be
    stuck in those channels for an indeterminate period of time, if they are returned to you at all. It depends on the
    cooperation of your peers. Choose peers with discretion.
  uninstall: |
    READ CAREFULLY! Uninstalling c-lightning will result in permanent loss of data, including its private keys for its
    on-chain wallet and all channel states. Please make a backup if you have any funds in your on-chain wallet or in any
    channels. Recovering from backup will restore your on-chain wallet, but due to the architecture of the Lightning
    Network, your channels cannot be recovered. All your channel funds will be stuck in those channels for an indeterminate
    period of time, and if your peers do not cooperate, they will not be recoverable at all.
  restore: |
    Restoring c-lightning will overwrite its current data, including its on-chain wallet and channels. Any channels opened
    since the last backup will be forgotten and may linger indefinitely, and channels contained in the backup will be
    closed and their funds returned to your wallet, assuming your peers choose to cooperate.
interfaces:
  rpc:
    name: RPC Interface
    description: Listens for JSON-RPC commands over HTTP.
    tor-config:
      port-mapping:
        8080: "8080"
    lan-config:
      8080:
        ssl: false
        internal: 8080
    ui: false
    protocols:
      - tcp
      - http
      - json-rpc
  peer:
    name: Peer Interface
    description: Listens for incoming connections from lightning peers.
    tor-config:
      port-mapping:
        9735: "9735"
    ui: false
    protocols:
      - tcp
      - lightning
  rest:
    name: C-Lightning-REST API
    description: C-Lightning-REST is a plugin for c-lightning written by the RTL team that exposes an LND-like REST API for C-Lightning.
    tor-config:
      port-mapping:
        3001: "3001"
    lan-config:
      3001:
        ssl: true
        internal: 3001
    ui: false
    protocols:
      - tcp
      - http
dependencies:
  btc-rpc-proxy:
    version: ">=0.2.4 <0.4.0"
    requirement:
      type: "opt-out"
      how: Can alternatively configure a direct connection to the internal Bitcoin Core.
    description: Used to fetch validated blocks.
    config:
      check:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        io-format: yaml
        args:
          - dependency
          - check
          - "c-lightning"
          - "btc-rpc-proxy"
          - /root/.lightning
          - "/mnt/assets/btc-rpc-proxy.rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root/.lightning
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        io-format: yaml
        args:
          - dependency
          - "auto-configure"
          - "c-lightning"
          - "btc-rpc-proxy"
          - /root/.lightning
          - "/mnt/assets/btc-rpc-proxy.rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root/.lightning
  bitcoind:
    version: ">=0.21.1.2 <23.0.0"
    requirement:
      type: "opt-out"
      how: Can alternatively configure the internal Bitcoin Proxy service.
    description: Used as a blockchain backend.
    config:
      check:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - check
          - "c-lightning"
          - bitcoind
          - /root/.lightning
          - "/mnt/assets/bitcoind.rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root/.lightning
        io-format: yaml
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - "auto-configure"
          - "c-lightning"
          - bitcoind
          - /root/.lightning
          - "/mnt/assets/bitcoind.rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root/.lightning
        io-format: yaml
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /root/.lightning
    mounts:
      BACKUP: /mnt/backup
      main: /root/.lightning
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /root/.lightning
    mounts:
      BACKUP: /mnt/backup
      main: /root/.lightning
